// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// get_P
NumericMatrix get_P(NumericVector theta, int number_of_loci, int number_of_clusters);
RcppExport SEXP _disclapmix2_get_P(SEXP thetaSEXP, SEXP number_of_lociSEXP, SEXP number_of_clustersSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< int >::type number_of_loci(number_of_lociSEXP);
    Rcpp::traits::input_parameter< int >::type number_of_clusters(number_of_clustersSEXP);
    rcpp_result_gen = Rcpp::wrap(get_P(theta, number_of_loci, number_of_clusters));
    return rcpp_result_gen;
END_RCPP
}
// get_tau
NumericVector get_tau(NumericVector theta, int number_of_loci, int number_of_clusters);
RcppExport SEXP _disclapmix2_get_tau(SEXP thetaSEXP, SEXP number_of_lociSEXP, SEXP number_of_clustersSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< int >::type number_of_loci(number_of_lociSEXP);
    Rcpp::traits::input_parameter< int >::type number_of_clusters(number_of_clustersSEXP);
    rcpp_result_gen = Rcpp::wrap(get_tau(theta, number_of_loci, number_of_clusters));
    return rcpp_result_gen;
END_RCPP
}
// loglik_tau_p
double loglik_tau_p(NumericVector tau, NumericMatrix p_by_cluster_and_locus, IntegerMatrix db, IntegerMatrix y, int number_of_1_loci, int number_of_2_loci);
RcppExport SEXP _disclapmix2_loglik_tau_p(SEXP tauSEXP, SEXP p_by_cluster_and_locusSEXP, SEXP dbSEXP, SEXP ySEXP, SEXP number_of_1_lociSEXP, SEXP number_of_2_lociSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type p_by_cluster_and_locus(p_by_cluster_and_locusSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type db(dbSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type number_of_1_loci(number_of_1_lociSEXP);
    Rcpp::traits::input_parameter< int >::type number_of_2_loci(number_of_2_lociSEXP);
    rcpp_result_gen = Rcpp::wrap(loglik_tau_p(tau, p_by_cluster_and_locus, db, y, number_of_1_loci, number_of_2_loci));
    return rcpp_result_gen;
END_RCPP
}
// neg_loglik_theta
double neg_loglik_theta(NumericVector theta, IntegerMatrix db, IntegerMatrix y, int number_of_1_loci, int number_of_2_loci);
RcppExport SEXP _disclapmix2_neg_loglik_theta(SEXP thetaSEXP, SEXP dbSEXP, SEXP ySEXP, SEXP number_of_1_lociSEXP, SEXP number_of_2_lociSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type db(dbSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type number_of_1_loci(number_of_1_lociSEXP);
    Rcpp::traits::input_parameter< int >::type number_of_2_loci(number_of_2_lociSEXP);
    rcpp_result_gen = Rcpp::wrap(neg_loglik_theta(theta, db, y, number_of_1_loci, number_of_2_loci));
    return rcpp_result_gen;
END_RCPP
}
// compute_profile_prs
NumericMatrix compute_profile_prs(NumericMatrix p_by_cluster_and_locus, IntegerMatrix db, IntegerMatrix y, int number_of_1_loci, int number_of_2_loci);
RcppExport SEXP _disclapmix2_compute_profile_prs(SEXP p_by_cluster_and_locusSEXP, SEXP dbSEXP, SEXP ySEXP, SEXP number_of_1_lociSEXP, SEXP number_of_2_lociSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type p_by_cluster_and_locus(p_by_cluster_and_locusSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type db(dbSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type number_of_1_loci(number_of_1_lociSEXP);
    Rcpp::traits::input_parameter< int >::type number_of_2_loci(number_of_2_lociSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_profile_prs(p_by_cluster_and_locus, db, y, number_of_1_loci, number_of_2_loci));
    return rcpp_result_gen;
END_RCPP
}
// compute_posterior_cluster_prs
NumericMatrix compute_posterior_cluster_prs(NumericMatrix profile_pr, NumericVector tau);
RcppExport SEXP _disclapmix2_compute_posterior_cluster_prs(SEXP profile_prSEXP, SEXP tauSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type profile_pr(profile_prSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type tau(tauSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_posterior_cluster_prs(profile_pr, tau));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_disclapmix2_get_P", (DL_FUNC) &_disclapmix2_get_P, 3},
    {"_disclapmix2_get_tau", (DL_FUNC) &_disclapmix2_get_tau, 3},
    {"_disclapmix2_loglik_tau_p", (DL_FUNC) &_disclapmix2_loglik_tau_p, 6},
    {"_disclapmix2_neg_loglik_theta", (DL_FUNC) &_disclapmix2_neg_loglik_theta, 5},
    {"_disclapmix2_compute_profile_prs", (DL_FUNC) &_disclapmix2_compute_profile_prs, 5},
    {"_disclapmix2_compute_posterior_cluster_prs", (DL_FUNC) &_disclapmix2_compute_posterior_cluster_prs, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_disclapmix2(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
